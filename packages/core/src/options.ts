export type RuntimeModeOptions = {
	mode?: "runtime";
	/**
	 * Disable runtime validation
	 * @example
	 * disableRuntimeTypeCheck: true
	 * ```ts
	 * export const VAR = process.env.VAR as string;
	 * ```
	 * disableRuntimeTypeCheck: false
	 * ```ts
	 * export const VAR = process.env.VAR as string;
	 * if (typeof VAR !== 'string') throw new Error('VAR is not defined in .env');
	 * ```
	 */
	disableRuntimeTypeCheck?: boolean;
	/**
	 * Disable type assertions like `as string`
	 * @example
	 * enableTypeAssertion: true
	 * ```js
	 * export const VAR = process.env.VAR as string;
	 * ```
	 * enableTypeAssertion: false
	 * ```ts
	 * export const VAR = process.env.VAR;
	 * ```
	 */
	enableTypeAssertion?: boolean;
};

export type DeclarationModeOptions = {
	mode: "declaration";
	disableRuntimeTypeCheck?: never;
	enableTypeAssertion?: never;
};

export type PropertyOptions = { patterns?: Record<string, RegExp | string> } & (
	| { allowList: string[]; denyList?: undefined; required?: undefined }
	| { allowList?: undefined; denyList?: string[]; required?: string[] }
);

export type GenerateOptions = PropertyOptions & {
	/**
	 * Prefix for generated code. [default: `/* Auto generated by typedotenv *‚Äç/`]
	 */
	prefix?: string;
	/**
	 * Object that provide environment variables [default: `process.env`]
	 * @example `import.meta.env`
	 */
	envObject?: string;
	/**
	 * End of line cheracter [default: `\n`]
	 */
	eol?: string;
	/**
	 * Access environment variables from index (obj["key"]) signature or dot (obj.key) signature
	 * @example
	 * accessFromIndexSignature: true
	 * ```js
	 * export const VAR = process.env["VAR"];
	 * ```
	 * accessFromIndexSignature: false
	 * ```ts
	 * export const VAR = process.env.VAR;
	 * ```
	 */
	accessFromIndexSignature?: boolean;
} & (RuntimeModeOptions | DeclarationModeOptions);
