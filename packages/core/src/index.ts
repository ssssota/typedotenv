import { parse } from "dotenv";
import type { PropertyOptions } from "./validation";
import { validation } from "./validation";

const defaultPrefix = "/* Auto generated by typedotenv */";

export type RuntimeModeOptions = {
	mode?: "runtime";
	/**
	 * Disable runtime validation
	 * @example
	 * disableRuntimeTypeCheck: true
	 * ```ts
	 * export const VAR = process.env.VAR as string;
	 * ```
	 * disableRuntimeTypeCheck: false
	 * ```ts
	 * export const VAR = process.env.VAR as string;
	 * if (typeof VAR !== 'string') throw new Error('VAR is not defined in .env');
	 * ```
	 */
	disableRuntimeTypeCheck?: boolean;
	/**
	 * Disable type assertions like `as string`
	 * @example
	 * enableTypeAssertion: true
	 * ```js
	 * export const VAR = process.env.VAR as string;
	 * ```
	 * enableTypeAssertion: false
	 * ```ts
	 * export const VAR = process.env.VAR;
	 * ```
	 */
	enableTypeAssertion?: boolean;
};

export type DeclarationModeOptions = {
	mode: "declaration";
	disableRuntimeTypeCheck?: never;
	enableTypeAssertion?: never;
};

export type GenerateOptions = PropertyOptions & {
	/**
	 * Prefix for generated code. [default: `/* Auto generated by typedotenv *‍/`]
	 */
	prefix?: string;
	/**
	 * Object that provide environment variables [default: `process.env`]
	 * @example `import.meta.env`
	 */
	envObject?: string;
	/**
	 * End of line cheracter [default: `\n`]
	 */
	eol?: string;
	/**
	 * Access environment variables from index (obj["key"]) signature or dot (obj.key) signature
	 * @example
	 * accessFromIndexSignature: true
	 * ```js
	 * export const VAR = process.env["VAR"];
	 * ```
	 * accessFromIndexSignature: false
	 * ```ts
	 * export const VAR = process.env.VAR;
	 * ```
	 */
	accessFromIndexSignature?: boolean;
} & (RuntimeModeOptions | DeclarationModeOptions);

export type Result = {
	/** Generated typescript code */
	readonly code: string;
	/** List of environment variables */
	readonly variables: readonly string[];
};

/**
 * Generate TypeScript from dotenv contents
 * @param dotenv dotenv contents
 * @param options generate options include validation options
 * @returns generated TypeScript code
 */
export const generate = (
	dotenv: string,
	options: GenerateOptions = {},
): Result => {
	const parsed = parse(dotenv);
	validation(parsed, options);
	const eol = options.eol ?? "\n";
	const typeAssertion = options.enableTypeAssertion ? " as string" : "";
	const variables = Object.keys(parsed);
	const definitions = variables.map((key) => {
		if (options.mode === "declaration") {
			return `declare const ${key}: string;`;
		}
		const envVar = buildEnvReference(options, key);
		return [
			!options.disableRuntimeTypeCheck &&
				`if (typeof ${envVar} !== 'string') throw new Error('${key} is not defined in .env');`,
			`export const ${key} = ${envVar}${typeAssertion};`,
		]
			.filter(Boolean)
			.join(eol);
	});
	const code = [options.prefix ?? defaultPrefix, ...definitions].join(eol);
	return {
		code: code + eol,
		variables,
	};
};

export const buildEnvReference = (options: GenerateOptions, env: string) => {
	const envObject = options.envObject ?? "process.env";
	return options.accessFromIndexSignature
		? `${envObject}["${env}"]`
		: `${envObject}.${env}`;
};
