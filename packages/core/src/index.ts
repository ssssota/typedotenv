import { parse } from "dotenv";
import type { PropertyOptions } from "./validation";
import { validation } from "./validation";

const defaultPrefix = "/* Auto generated by typedotenv */";

export type GenerateOptions = PropertyOptions & {
	/**
	 * Prefix for generated code. [default: `/* Auto generated by typedotenv *‍/`]
	 */
	prefix?: string;
	/**
	 * Object that provide environment variables [default: `process.env`]
	 * @example `import.meta.env`
	 */
	envObject?: string;
	/**
	 * Disable type assertions like `as string`
	 * @example
	 * enableTypeAssertion: true
	 * ```js
	 * export const VAR = process.env.VAR as string;
	 * ```
	 * enableTypeAssertion: false
	 * ```ts
	 * export const VAR = process.env.VAR;
	 * ```
	 */
	enableTypeAssertion?: boolean;
	/**
	 * End of line cheracter [default: `\n`]
	 */
	eol?: string;
	/**
	 * Disable runtime validation
	 * @example
	 * disableRuntimeTypeCheck: true
	 * ```ts
	 * export const VAR = process.env.VAR as string;
	 * ```
	 * disableRuntimeTypeCheck: false
	 * ```ts
	 * export const VAR = process.env.VAR as string;
	 * if (typeof VAR !== 'string') throw new Error('VAR is not defined in .env');
	 * ```
	 */
	disableRuntimeTypeCheck?: boolean;
};

/**
 * Generate TypeScript from dotenv contents
 * @param dotenv dotenv contents
 * @param options generate options include validation options
 * @returns generated TypeScript code
 */
export const generate = (dotenv: string, options: GenerateOptions = {}) => {
	const parsed = parse(dotenv);
	validation(parsed, options);
	const eol = options.eol ?? "\n";
	const envObject = options.envObject ?? "process.env";
	const typeAssertion = options.enableTypeAssertion ? " as string" : "";
	const definitions = Object.keys(parsed).map((key) => {
		const envVar = `${envObject}.${key}`;
		return [
			!options.disableRuntimeTypeCheck &&
				`if (typeof ${envVar} !== 'string') throw new Error('${key} is not defined in .env');`,
			`export const ${key} = ${envVar}${typeAssertion};`,
		]
			.filter(Boolean)
			.join(eol);
	});
	const code = [options.prefix ?? defaultPrefix, ...definitions].join(eol);
	return code + eol;
};
