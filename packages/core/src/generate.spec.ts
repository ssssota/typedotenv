import { expect, it } from "vitest";
import { generate } from "./generate";

it("should generate exports", () => {
	const actual = generate("A=a\nB=");
	expect(actual.code).toBe(
		[
			"/* Auto generated by typedotenv */",
			"if (typeof process.env.A !== 'string') throw new Error('A is not defined in .env');",
			"export const A = process.env.A;",
			"if (typeof process.env.B !== 'string') throw new Error('B is not defined in .env');",
			"export const B = process.env.B;",
			"",
		].join("\n"),
	);
	expect(actual.variables).toStrictEqual(["A", "B"]);
});

it("should generate exports (declaration mode)", () => {
	const actual = generate("A=a\nB=", { mode: "declaration" });
	expect(actual.code).toBe(
		[
			"/* Auto generated by typedotenv */",
			'declare module "virtual:env" {',
			"export const A: string;",
			"export const B: string;",
			"}",
			"",
		].join("\n"),
	);
	expect(actual.variables).toStrictEqual(["A", "B"]);
});

it("should prepend prefix", () => {
	const prefix = "/* eslint-disable */";
	const actual = generate("", { prefix });
	expect(actual.code).toBe(`${prefix}\n`);
	expect(actual.variables).toStrictEqual([]);
});

it("should change eol", () => {
	const actual = generate("", { eol: "\r\n" });
	expect(actual.code).toBe("/* Auto generated by typedotenv */\r\n");
});

it("should change env object", () => {
	const actual = generate("A=", { envObject: "import.meta.env" });
	expect(actual.code).toBe(
		[
			"/* Auto generated by typedotenv */",
			"if (typeof import.meta.env.A !== 'string') throw new Error('A is not defined in .env');",
			"export const A = import.meta.env.A;",
			"",
		].join("\n"),
	);
});

it("should set 'accessFromIndexSignature' option", () => {
	const actual = generate("A=", {
		envObject: "import.meta.env",
		accessFromIndexSignature: true,
	});
	expect(actual.code).toBe(
		[
			"/* Auto generated by typedotenv */",
			"if (typeof import.meta.env[\"A\"] !== 'string') throw new Error('A is not defined in .env');",
			'export const A = import.meta.env["A"];',
			"",
		].join("\n"),
	);
});
