import type { ExecFileOptions } from "node:child_process";
import { execFile } from "node:child_process";
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { fileURLToPath } from "node:url";
import { afterAll, beforeAll, expect, it } from "vitest";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.join(__filename, "..");
const outDir = path.join(__dirname, "output");
const run = (
	args: string[] = [],
	opts: ExecFileOptions = {},
): Promise<{ stdout: string; stderr: string }> => {
	return new Promise((resolve, reject) => {
		execFile(
			"node",
			["../dist/index.cjs", ...args],
			{ ...opts, cwd: __dirname },
			(error, o, e) => {
				if (error) return reject(error);
				return resolve({ stdout: o, stderr: e });
			},
		);
	});
};

beforeAll(async () => {
	if (await fs.readdir(outDir).catch(() => false)) return;
	await fs.mkdir(outDir);
});
afterAll(async () => {
	if (await fs.readdir(outDir).catch(() => false))
		await fs.rm(outDir, { recursive: true, force: true });
});

it("should output help message", async () => {
	const result = await run();
	expect(result.stderr).toBe("");
	expect(result.stdout).toMatchInlineSnapshot(`
		"Usage: typedotenv [options] [command]

		CLI tool for typedotenv (dotenv utility for TypeScript)

		Options:
		  -V, --version                     output the version number
		  -h, --help                        display help for command

		Commands:
		  generate [options] [output-file]
		"
	`);
});

it("should output help message for generate", async () => {
	const result = await run(["generate", "--help"]);
	expect(result.stderr).toBe("");
	expect(result.stdout).toMatchInlineSnapshot(`
		"Usage: typedotenv generate [options] [output-file]

		Arguments:
		  output-file                   Destination of TypeScript file (default:
		                                \\"env.ts\\")

		Options:
		  -i --input <env_filepath>     .env file (e.g. .env.development)
		  -e --env <environment>        .env file suffix (e.g. production ->
		                                .env.production)
		  -d --dir <envfile_directory>  .env file directory path [default:CWD]
		  -h, --help                    display help for command
		"
	`);
});

it("should generate from default envfile .env", async () => {
	const outPath = path.join(outDir, "default.ts");
	await run(["generate", outPath]);
	expect(await fs.readFile(outPath, "utf8")).toMatchInlineSnapshot(`
		"/* Auto generated by typedotenv */
		export const TEST = process.env.TEST as string;
		"
	`);
});

it("should generate from .env.test", async () => {
	const outPath = path.join(outDir, "test.ts");
	await run(["generate", "-e", "test", outPath]);
	expect(await fs.readFile(outPath, "utf8")).toMatchInlineSnapshot(`
		"/* Auto generated by typedotenv */
		export const KEY = process.env.KEY as string;
		"
	`);
});

it("should generate from .env.test", async () => {
	const outPath = path.join(outDir, "dir.ts");
	await run(["generate", "-d", "envfiles", outPath]);
	expect(await fs.readFile(outPath, "utf8")).toMatchInlineSnapshot(`
		"/* Auto generated by typedotenv */
		export const HELLO = process.env.HELLO as string;
		"
	`);
});

it("should generate from .env.test", async () => {
	const outPath = path.join(outDir, "dir.ts");
	await run(["generate", "-i", "envfiles/.env.production", outPath]);
	expect(await fs.readFile(outPath, "utf8")).toMatchInlineSnapshot(`
		"/* Auto generated by typedotenv */
		export const API_KEY = process.env.API_KEY as string;
		"
	`);
});
